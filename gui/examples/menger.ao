(define (recurse x y scale i)
  (define base
    (rectangle (vec2 (- x scale) (- y scale))
               (vec2 (+ x scale) (+ y scale))))
  (if (= i 0)
    base
    (let ((j (- i 1))
          (s (* scale 2))
          (t (/ scale 3)))
      (min base
        (recurse (+ x s) y t j)
        (recurse (- x s) y t j)
        (recurse x (+ y s) t j)
        (recurse x (- y s) t j)
        (recurse (+ x s) (+ y s) t j)
        (recurse (+ x s) (- y s) t j)
        (recurse (- x s) (+ y s) t j)
        (recurse (- x s) (- y s) t j)
))))

(define cutout (recurse 0 0 2/3 2))
(define menger
  (difference (box #[-2 -2 -2] #[2 2 2])
    cutout
    (reflect-yz cutout)
    (reflect-xy (reflect-yz cutout))
))
menger
